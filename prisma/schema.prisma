// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model BarberShop {
  id          String              @id @default(uuid())
  email       String
  name        String
  address     String
  phones      String[]
  description String
  imageUrl    String
  services    BarberShopService[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}

model BarberShopService {
  id           String    @id @default(uuid())
  name         String
  description  String
  imageUrl     String
  price        Decimal   @db.Decimal(10, 2)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  barberShopId String
  bookings     Booking[]

  barberShop BarberShop @relation(fields: [barberShopId], references: [id])
}

model Booking {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  description String
  serviceId   String
  service     BarberShopService @relation(fields: [serviceId], references: [id])
  date        DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}
